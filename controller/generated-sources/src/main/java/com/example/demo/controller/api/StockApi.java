/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.18).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.example.demo.controller.api;

import com.example.demo.controller.rdto.StockRDTO;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-11-24T14:52:49.294969600+01:00[Europe/Madrid]")
@Api(value = "stock", description = "the stock API")
public interface StockApi {

    @ApiOperation(value = "Get current shoe stock from the store", nickname = "getStock", notes = "This service fetches the current shoe stock in the store. In the event that there are no shoes, EMPTY will be returned, in the event that there are less than 30, SOME will be returned and in the event that there are 30, FULL will be returned.", response = StockRDTO.class, tags={ "Stock", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns the current shoe stock if the operation is successful", response = StockRDTO.class),
        @ApiResponse(code = 400, message = "In the event that the data necessary to carry out the operation are not sent or they have a wrong format"),
        @ApiResponse(code = 500, message = "In case of internal server error") })
    @RequestMapping(value = "/stock",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<StockRDTO> getStock(@ApiParam(value = "Service version" ,required=true) @RequestHeader(value="Version", required=true) Integer version
);


    @ApiOperation(value = "Update current shoe stock from the store", nickname = "updateStock", notes = "This service modifies the current stock of shoes in the store. The maximum capacity allowed in total is 30 packages. In the event that there are more, an error will be thrown.", tags={ "Stock", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful operation response with no content."),
        @ApiResponse(code = 400, message = "In the event that the data necessary to carry out the operation are not sent or they have a wrong format"),
        @ApiResponse(code = 500, message = "In case of internal server error") })
    @RequestMapping(value = "/stock",
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<Void> updateStock(@ApiParam(value = "Stock shoe to update" ,required=true )  @Valid @RequestBody StockRDTO body
,@ApiParam(value = "Service version" ,required=true) @RequestHeader(value="Version", required=true) Integer version
);

}
